import com.modrinth.minotaur.TaskModrinthUpload

import java.text.SimpleDateFormat

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
        classpath 'com.android.tools.build:gradle:2.3.0'
    }
}

plugins {
    id "maven-publish"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'org.jetbrains.changelog' version '1.2.1'
    id "com.modrinth.minotaur" version "1.2.1"
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
}
apply plugin: 'net.minecraftforge.gradle'
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'


java.toolchain.languageVersion = JavaLanguageVersion.of(17)

wrapper {
    gradleVersion = '7.4'
    distributionType = Wrapper.DistributionType.ALL
}

def isSnapshotVersion = Boolean.valueOf(System.getProperty("snapshot"))

version = "${mod_version}" + (isSnapshotVersion ? "-SNAPSHOT" : "")
group = 'dk.zakariassen.finalevolution'
archivesBaseName = "finalevolution-${minecraft_version}"

def static getenv(path = ".env") {
    def env = [:]

    def file = new File(path)
    if (file.exists()) {
        file.eachLine { line ->
            def (name, value) = line.tokenize("=")
            if (value != null) {
                env[name.trim()] = value.trim()
            }
        }
    }

    return env
}

def secretEnv = getenv()
def curseforgeKey = secretEnv["CURSEFORGE_KEY"] ?: System.getenv("CURSEFORGE_KEY") ?: ''
def modrinthKey = secretEnv["MODRINTH_KEY"] ?: System.getenv("MODRINTH_KEY")


// Include resources generated by data generators.
sourceSets {
    main.resources {
        srcDir 'src/generated/resources'
    }
    testMod {}
}

minecraft {

    mappings channel: "official", version: "1.18.2"

    accessTransformer file('src/main/resources/META-INF/accesstransformer.cfg')
    accessTransformer file('src/testMod/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            properties 'forge.logging.console.level': 'debug'

            mods {
                finalevolution {
                    source sourceSets.main
                }
            }
            if (project.hasProperty('mc_uuid')) {
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                args '--accessToken', project.getProperty('mc_accessToken')
            }
        }

        server {
            workingDirectory project.file('run')
            args '--nogui'

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'info'

            mods {
                finalevolution {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'finalevolution', '--all',
                    '--existing', file('src/main/resources').toString(),
                    '--existing', file('src/generated/resources').toString(),
                    '--output', file('src/generated/resources/')

            mods {
                finalevolution {
                    source sourceSets.main
                }
            }
        }

        testClient {
            workingDirectory project.file('test-files/client')
            parent runs.client

            mods {
                aptest {
                    source sourceSets.testMod
                }
            }

            lazyToken('minecraft_classpath') {
                (configurations.implementationExtra.copyRecursive().resolve())
                        .collect { it.absolutePath }
                        .join(File.pathSeparator)
            }
        }

        testServer {
            workingDirectory project.file('test-files/server')
            parent runs.server

            mods {
                aptest {
                    source sourceSets.testMod
                }
            }

            lazyToken('minecraft_classpath') {
                (configurations.implementationExtra.copyRecursive().resolve())
                        .collect { it.absolutePath }
                        .join(File.pathSeparator)
            }
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "Squiddev maven"
        url = 'https://squiddev.cc/maven/'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "LDT Team"
        url = 'https://ldtteam.jfrog.io/ldtteam/modding'
    }
    maven {
        name = "Modmaven"
        url = 'https://modmaven.dev/'
    }
    maven {
        name = "Create maven"
        url = "https://maven.tterrag.com/"
        content {
            includeGroup "com.simibubi.create"
            includeGroup "com.jozufozu.flywheel"
        }
    }
    maven {
        name = "Patchouli Maven"
        url = 'https://maven.blamejared.com'
    }

    maven {
        name = "SirEdvin's private repository"
        url = "https://repo.repsy.io/mvn/siredvin/default"
        content {
            includeGroup "site.siredvin.ttoolkit"
        }
    }

    maven {
        url = uri("https://maven.pkg.github.com/refinedmods/refinedstorage")
        credentials {
            username = "anything"
            password = "\u0067hp_oGjcDFCn8jeTzIj4Ke9pLoEVtpnZMP4VQgaX"
        }
    }

    maven {
        name = "Srendis repo"
        url = "https://srendi.jfrog.io/artifactory/default-maven-local/"
        content {
            includeGroup "site.siredvin.ttoolkit"
        }
    }
}

configurations {
    implementationExtra
    testModImplementation.extendsFrom(implementation)
    testModImplementation.extendsFrom(testImplementation)
}



dependencies {
    // Minimal requirements
    compileOnly "org.jetbrains:annotations:${jb_annotations}"
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("org.squiddev:cc-tweaked-${cc_version}")
    // Compile-time API required
    //Ae2
    compileOnly fg.deobf("appeng:appliedenergistics2:${appliedenergistics_version}")
    //Curios
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    // Minimal requirements end

    // Extended requirements
    // Applied Energistics 2
    runtimeOnly fg.deobf("appeng:appliedenergistics2:${appliedenergistics_version}")
    // Curios
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

    // Refined Storage
    implementation fg.deobf("com.refinedmods:refinedstorage:${refinedstorage_version}") {
        transitive false
    }

    // Minecolonies
    // Change to compileOnly when running `runData`
    implementation fg.deobf("com.ldtteam:minecolonies:${minecolonies_version}")
    implementation fg.deobf("com.ldtteam:structurize:${structurize_version}")
    implementation fg.deobf("com.ldtteam:multi-piston:${multipiston_version}")
    implementation fg.deobf("com.ldtteam:domum_ornamentum:${domumornamentum_version}:universal")
    implementation fg.deobf("com.ldtteam:blockui:${blockui_version}")

    //Patchouli
    //runtimeOnly "vazkii.patchouli:Patchouli:${patchouli_version}"

    //Removed until fully ported
    //testImplementation fg.deobf("site.siredvin.ttoolkit:ttoolkit-${minecraft_version}:${ttoolkit_version}")
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junit_version}"
    testImplementation "org.hamcrest:hamcrest:${hamcrest_version}"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinx_coroutines_version}"
    testModImplementation sourceSets.main.output

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    // Testing stuff
    // JEI
    implementation fg.deobf("mezz.jei:jei-${jei_version}")
}


changelog {
    version = "${project.version}"
    path = "${project.projectDir}/CHANGELOG.md"
    header = "[${minecraft_version}-${-> version.get()}] - ${new SimpleDateFormat("yyyy-MM-dd").format(new Date())}"
    //Valid patterns would be
    //1.16.5-1.1.1.1b
    //1.18-1.0r
    //1.19-1.0.0a
    headerParserRegex = ~/\d+(\.\d+){1,2}-\d+(\.\d+){1,3}\w/
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = []
}

compileTestModJava {
    dependsOn(compileJava)
}

task setupServer(type: Copy) {
    group "test server"
    description "Sets up the environment for the test server."

    from("src/testMod/server-files") {
        include "eula.txt"
        include "server.properties"
    }
    into "test-files/server"
}

["Client", "Server"].forEach { name ->
    tasks.register("test$name", JavaExec.class).configure {
        it.group('In-game tests')
        it.description("Runs tests on a temporary Minecraft instance.")
        it.dependsOn(setupServer, "prepareRunTest$name", "cleanTest$name", 'compileTestModJava')

        JavaExec exec = tasks.getByName("runTest$name")
        exec.copyTo(it)
        it.setClasspath(exec.getClasspath())
        it.mainClass = exec.mainClass
        it.setArgs(exec.getArgs())

        it.systemProperty('forge.logging.console.level', 'debug')
        it.systemProperty('ttoolkit.run', 'true')
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
    }
}

jar {
    manifest({
        attributes([
                "Specification-Title"     : "finalevolution",
                "Specification-Vendor"    : "dk_headcrab_dk",
                "Specification-Version"   : "${version}",
                "Implementation-Title"    : "finalevolution",
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "dk_headcrab_dk",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    })
}

jar.finalizedBy('reobfJar')

curseforge {
    apiKey = curseforgeKey

    project {
        id = "431725"
        releaseType = "${release_type}"
        mainArtifact(jar) {
            displayName = "Final Evolution ${minecraft_version} ${version}"
            relations {
                requiredDependency 'cc-tweaked'
                tool 'curios'
            }
        }
        addGameVersion "${minecraft_version}"
        try {
            changelog = "${project.changelog.get("${minecraft_version}-${project.version}").withHeader(false).toText()}"
            changelogType = "markdown"
        } catch (err) {
            System.out.println(err)
            changelog = ""
        }
    }
}


task publishModrinth(type: TaskModrinthUpload) {
    dependsOn('assemble', 'reobfJar')
    onlyIf {
        modrinthKey
    }

    token = modrinthKey
    projectId = 'SOw6jD6x'
    uploadFile = jar

    versionNumber = "${minecraft_version}-${project.version}"
    versionName = "Final Evolution ${minecraft_version} ${version}"
    versionType = release_type

    addGameVersion(minecraft_version)
    addLoader('forge')

    try {
        changelog = "${project.changelog.get("${minecraft_version}-${project.version}").withHeader(false).toText()}"
        changelogType = "markdown"
    } catch (err) {
        System.out.println(err)
        changelog = ""
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId archivesBaseName
            artifact jar
        }
    }
    repositories {
        maven {
            url ""
            credentials {
                username = secretEnv["USERNAME"] ?: System.getenv("USERNAME")
                password = secretEnv["TOKEN"] ?: System.getenv("TOKEN")
            }
        }
    }
}
